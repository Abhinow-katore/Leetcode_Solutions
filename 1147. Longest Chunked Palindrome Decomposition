Problem : 

You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:

subtexti is a non-empty string.
The concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).
subtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).
Return the largest possible value of k.

Solution in Java :


class Solution {
    public int longestDecomposition(String s) {
        String s1 = "", s2 = "";
        int n = s.length();
        int res = 0;
        for (int i = 0; i < n / 2; i++) {
            s1 = s1 + s.charAt(i);
            s2 = s.charAt(n - i - 1) + s2;
            if (s1.equals(s2)) {
                res += 2;
                s1 = "";
                s2 = "";
            }
        }
        if (res == 0 || n % 2 == 1 || s1 != "" || s2 != "") {
            res++;
        }
        return res;
    }
}
