Problem : 

You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.

0 means the cell is empty, so you can pass through,
1 means the cell contains a cherry that you can pick up and pass through, or
-1 means the cell contains a thorn that blocks your way.
Return the maximum number of cherries you can collect by following the rules below:

Starting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).
After reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.
When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.
If there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.


Solution in Java :


class Solution {
    
    // path from [n - 1][n - 1] to [0][0], is same as [0,0] to [n - 1][n - 1].
    // it simply means we can have two paths from [0,0] to [n - 1][n - 1],
    // to collect max Cherry
    // so we have coordinates of two robots as, {r1, c1}, {r2, c2}
    // now we simply try all paths and keep store the results, to avoid recalculation.
    
    Map<String, Integer> memo = new HashMap<>();
    int[][] directions = new int[][]{{1, 0}, {0, 1}};
    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        int ans = collectCherry(grid, n, 0, 0, 0, 0);
        return ans <= 0 ? 0 : ans;
    }
    private int collectCherry(int[][] grid, int n, int r1, int c1, int r2, int c2) {
        String key = r1 + "_" + c1 + "_" + r2 + "_" + c2;
        if (memo.containsKey(key)) {
            return memo.get(key);
        }
        if (r1 >= n || c1 >= n || r2 >= n || c2 >= n || grid[r1][c1] == -1 || grid[r2][c2] == -1) {
            return Integer.MIN_VALUE;
        }
        // both robots will reach end [n - 1][n - 1] at the same time,
        if (r1 == n - 1 && c1 == n - 1) {
            return grid[r1][c1];
        }
        int currCherry = 0;
        if (r1 == r2 && c1 == c2) {
            // same position, can be collected by only one robot
            currCherry += grid[r1][c1];
        }else {
            currCherry += grid[r1][c1] + grid[r2][c2];
        }
        
        int nextCherry = Integer.MIN_VALUE;
        for (int[] d1 : directions) {
            for (int[] d2 : directions) {
                int nr1 = r1 + d1[0];
                int nc1 = c1 + d1[1];
                int nr2 = r2 + d2[0];
                int nc2 = c2 + d2[1];
                nextCherry = Math.max(nextCherry, collectCherry(grid, n, nr1, nc1, nr2, nc2));
            }
        }
        
        int total = currCherry + nextCherry;
        memo.put(key, total);
        return total;
    }
}
