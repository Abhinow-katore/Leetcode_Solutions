Problem : 

There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.

We want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:

Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.
Every worker in the paid group must be paid at least their minimum wage expectation.
Given the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.



Solution in Java :

class Solution {
    
    static class Worker implements Comparable<Worker> {
        int quality;
        int wage;
        
        Worker(int quality, int wage) {
            this.quality = quality;
            this.wage = wage;
        }
        
        public double ratio() {
            return (double) wage / quality;
        }
        
        public int compareTo(Worker worker) {
            return Double.compare(ratio(), worker.ratio());
        }
    }
    
    static int INF = 1000000000;
    
    public double mincostToHireWorkers(int[] quality, int[] wage, int k) {
        int n = quality.length;
        
        Worker[] workers = new Worker[n];
        for (int i = 0; i < n; i++) {
            workers[i] = new Worker(quality[i], wage[i]);
        }
        
        Arrays.sort(workers);
        
        return minCostToHireKWorkers(workers, n, k);
    }
    
    private static double minCostToHireKWorkers(Worker[] workers, int n, int k) {
        double minCostToPay  = INF;
        
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        int sumOfQuality = 0;
        
        for (Worker currWorker : workers) { // for each worker whom we are paying its minimum wage
            pq.add(-currWorker.quality);
            sumOfQuality += currWorker.quality;
            
            if (pq.size() > k) {
                sumOfQuality += pq.poll();
            }
            
            if (pq.size() == k) { // can form a paid group
                minCostToPay = Math.min(minCostToPay, sumOfQuality * currWorker.ratio());
            }
            
        }
        
        return minCostToPay;
    }
}


/*

Why do we choose the highest quality person to remove? Why not choosing other workers?
Answer:
Since the workers are sorted in the increasing order of the wage/quality ratio, the global ratio will never decrease. For the previously scanned wrokers, we do not care about their personal ratios any more because their personal ratios will always be less than (or equal to) the current global ratio. So the previous workers' personal ratio will never affect the total payment.
Similarly, their personal base payment (i.e. the wage input) has been satisfied already. As the global ratio increases, their actual payemnt will only increase or stay the same, and will never become lower than their base payment.
So when deciding whom to remove, the only thing that matters is the workers' quality. With a given global ratio, removing the highest quality worker will reduces the total payment as much as possible. That is why we want to removing the highest quality worker.

*/
