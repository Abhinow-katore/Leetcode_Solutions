Problem : 

You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.



Solution in Java:


class Solution {
    class UnionFind{
        int[] parent;
        int[] size;
        UnionFind(int n) {
            parent = new int[n];
            size = new int[n];
            for(int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
        private int find(int x) {
            while(x != parent[x]) {
                parent[x] = find(parent[x]);
                x = parent[x];
            }
            return x;
        }
        private void union(int x, int y) {
            x = find(x);
            y = find(y);
            if(x == y) {
                return;
            }
            if(size[x] <= size[y]) {
                parent[x] = y;
                size[y] += size[x];
            }else {
                parent[y] = x;
                size[x] += size[y];
            }
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind(n);
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        int[] mal_count = new int[n];
        for(int node : initial) {
            mal_count[uf.find(node)]++;
        }
        int remove_node = -1, comp_size = -1;
        for(int node : initial) {
            int root = uf.find(node);
            if(mal_count[root] == 1) {
                int root_size = uf.size[root];
                if(root_size > comp_size) {
                    comp_size = root_size;
                    remove_node = node;
                }else if(root_size == comp_size && node < remove_node) {
                    remove_node = node;
                }
            }
        }
        if(remove_node == -1) {
            remove_node = Integer.MAX_VALUE;
            for(int node : initial) {
                remove_node = Math.min(remove_node, node);
            }
        }
        return remove_node;
    }
}
