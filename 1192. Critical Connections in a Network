Problem : 

There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

Solution in Java : 



class Solution {
    List<List<Integer>> criticalEdges = new ArrayList<>();
    Map<Integer, List<Integer>> graph = new HashMap<>();
    boolean[] visited;
    int[] timeVisited, lowestTime;
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        for (int i = 0; i < n; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (List<Integer> connection : connections) {
            int node1 = connection.get(0);
            int node2 = connection.get(1);
            graph.get(node1).add(node2);
            graph.get(node2).add(node1);
        }
        findCriticalConnections(n);
        return criticalEdges;
    }
    private void findCriticalConnections(int n) {
        visited = new boolean[n];
        timeVisited = new int[n];
        lowestTime = new int[n];
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                dfs(i, -1, 0);
            }
        }
    }
    private void dfs(int currNode, int parentNode, int currTime) {
        visited[currNode] = true;
        timeVisited[currNode] = lowestTime[currNode] = currTime;
        currTime++;
        for (int adjacent : graph.get(currNode)) {
            if (adjacent == parentNode) {
                continue;
            }
            if (!visited[adjacent]) {
                dfs(adjacent, currNode, currTime);
                lowestTime[currNode] = Math.min(lowestTime[currNode], lowestTime[adjacent]);
                if (lowestTime[adjacent] > timeVisited[currNode]) {
                    List<Integer> edge = new ArrayList<>();
                    edge.add(adjacent);
                    edge.add(currNode);
                    criticalEdges.add(edge);
                }
            }else {
                lowestTime[currNode] = Math.min(lowestTime[currNode], lowestTime[adjacent]);
            }
        }
    }
}
