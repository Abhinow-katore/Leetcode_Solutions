Problem : 

Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

 

Solution in Java : 


class Solution {
    public String shortestCommonSupersequence(String A, String B) {
        String res = "";
        int i = 0, j = 0;
        String s = lcs(A, B);
        for(char c : s.toCharArray()) {
            while(A.charAt(i) != c) {
                res += A.charAt(i++);
            }
            while(B.charAt(j) != c) {
                res += B.charAt(j++);
            }
            res += c;
            i++;
            j++;
        }
        res += A.substring(i);
        res += B.substring(j);
        return res;
    }
    private String lcs(String A, String B) {
        int m = A.length();
        int n = B.length();
        String[][] dp = new String[m + 1][n + 1];
        for(int i = 0; i <= m; i++) {
            Arrays.fill(dp[i], "");
        }
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                if(A.charAt(i - 1) == B.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + A.charAt(i - 1);
                }else {
                    dp[i][j] = dp[i - 1][j].length() > dp[i][j - 1].length() ? dp[i - 1][j] : dp[i][j - 1];
                }
            }
        }
        //System.out.println(dp[m][n]);
        return dp[m][n];
    }
}






